import json
import os

default_output_path = "output/output.json"
default_input_path = "input/input.json"


def unflatten(input_data, delimiter="."):
    """
    *** Disclaimer: This function's logic was generated by Gemini 2.5 Flash ***\n
    Recursively transforms dot-separated keys within a JSON-like dictionary
    into nested dictionary structures.

    Args:
        input_data (dict): A dictionary that may contain dot-separated keys
                           at any level, or already nested dictionaries.

    Returns:
        dict: A new dictionary with all dot-separated keys unflattened
              into nested structures.
    """
    if not isinstance(input_data, dict):
        return input_data

    output_data = {}

    # Process items to handle dot-separated keys at the current level
    for key, value in input_data.items():
        if delimiter in key:
            parts = key.split(delimiter)
            current_level = output_data
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    # If the value itself is a dictionary, recurse on it before assigning
                    current_level[part] = unflatten(value, delimiter)
                else:
                    if part not in current_level:
                        current_level[part] = {}
                    current_level = current_level[part]
        else:
            # If the key doesn't have a dot, but its value is a dictionary, recurse
            output_data[key] = (
                unflatten(value, delimiter) if isinstance(value, dict) else value
            )

    return output_data


def get_abs_path(rel_path):
    script_dir = os.path.dirname(__file__)  # <-- absolute dir the script is in
    abs_file_path = os.path.join(script_dir, rel_path)
    return abs_file_path


def open_json_from_path():
    rel_path = input("enter path: ")
    if rel_path == "":
        rel_path = get_abs_path(default_input_path)
    abs_file_path = get_abs_path(rel_path)
    try:
        with open(abs_file_path, "r", encoding="utf-8") as file:
            data = json.load(file)
    except Exception as message:
        print(message)
        print(f"invalid path: {abs_file_path}")
        open_json_from_path()

    else:
        return data


def save_json(data):
    path = input("enter output path: ")
    if path == "":
        path = get_abs_path(default_output_path)
    else:
        path = get_abs_path(path)
        try:
            with open(path, "w", encoding="utf-8") as file:
                json.dump(data, file, ensure_ascii=False, indent=2)
        except Exception as message:
            print(message)
            save_json(data)
        else:
            print(f"succesfully unflattened json. at {path}")


def main():
    json_data = open_json_from_path()
    unflattened_json = unflatten(json_data, delimiter=".")
    save_json(unflattened_json)


main()
